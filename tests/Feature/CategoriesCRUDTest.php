<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class CategoriesCRUDTest extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */

    use RefreshDatabase ;


protected function setUp(): void
{
    parent::setUp(); // TODO: Change the autogenerated stub
    $this->user = User::factory()->create();
    $this->user->role='admin';

}

    public function  testStatus201WithCreatedMessageWhenCreateCategoryWhenAuthenticated(){
        $this->withoutExceptionHandling();
        $response = $this->actingAs($this->user)->post('/categories',$this->data());
        $response->assertStatus(201);
        $response->assertJson(["message" =>"created"]);
        $this->get('categories')->assertSee($this->data()['name']);
    }

    public function testRedirectedToLoginIfNotAuthenticatedWith302Status(){
        $response = $this->post('/categories',$this->data());
        $response->assertStatus(302);
        $response->assertRedirect('login');
    }

    public function testCountOfDatabaseCategoriesTableIs1()
    {
        $this->actingAs($this->user)->post('categories',$this->data());
        $this->assertDatabaseCount('categories',1);
    }

    public function testAssertValidatedCookieExistAfterVisitingCategoriesRoute(){

    $response = $this->actingAs($this->user)->post('/categories',$this->data());
    $response->assertCookie('validated');
    }
    public function testAdminCanSeeCreateCategory()
    {

        $user = User::factory()->create();
        $user->role='admin';
        $response = $this->actingAs($user)->get('categories/create');
        $response->assertOk();
        $response->assertViewIs('create_category');

    }

    public function testNonAdminCanNotSeeCreateCategory()
    {
        $user = User::factory()->create();
        $user->role='non-admin';
        $response = $this->actingAs($user)->get('categories/create');
        $response->assertForbidden();
    }

    public function testUserCanSeeCategory()
    {
        $this->withoutExceptionHandling();
        $user = User::factory()->create();
        $user->role='admin';
        $category =Category::factory()->create();
        $this->actingAs($user)->get($category->path())->assertSee($category->nme)->assertSee($category->image);
    }


    private function data($data =[]){

    $defualt = [
        'name'  => 'watch' ,
        'image' => 'https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.vector4free.com%2Ffree-vectors%2FWatch&psig=AOvVaw2jSFz1QBSoFWaRrv_OEWf2&ust=1675798994549000&source=images&cd=vfe&ved=0CA8QjRxqFwoTCIjNve_Tgf0CFQAAAAAdAAAAABAE'
    ];

    return array_merge($defualt,$data);
    }
}
