<?php

namespace Tests\Feature;

use App\Models\Category;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class ProductsValidationTest extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */


    use RefreshDatabase ;

    private function data($data =[]){

        $category = Category::factory()->create();

        $default = [
            'title'  => 'shirt' ,
            'price'  => '250' ,
            'old_price'  => '260' ,
            'image'  => '260' ,
            'available'  => true ,
            'category_id'  => $category->id ,
        ];

        return array_merge($default,$data);
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::factory()->create();

    }

    public function testCanNotCreateProductWithEmptyTitle(){
        $response =$this->actingAs($this->user)->post('/products',$this->data(['title'=>'']));
        $response->assertSessionHasErrors(['title'=>'A title is required',]);
    }
    public function testCanNotCreateProductWithEmptyPrice(){
        $response =$this->actingAs($this->user)->post('/products',$this->data(['price'=>'']));
        $response->assertSessionHasErrors(['price'=>'A price is required',]);
    }
    public function testCanNotCreateProductWithEmptyOldPrice(){
        $response =$this->actingAs($this->user)->post('/products',$this->data(['old_price'=>'']));
        $response->assertSessionHasErrors(['old_price'=>'A old_price is required',]);
    }
    public function testCanNotCreateProductWithEmptyImage(){
        $response =$this->actingAs($this->user)->post('/products',$this->data(['image'=>'']));
        $response->assertSessionHasErrors(['image'=>'A image is required',]);
    }
    public function testCanNotCreateProductWithEmptyAvailable(){
        $response =$this->actingAs($this->user)->post('/products',$this->data(['available'=>'']));
        $response->assertSessionHasErrors(['available'=>'A available is required',]);
    }
    public function testCanNotCreateProductWithEmptyCategoryId(){
        $response =$this->actingAs($this->user)->post('/products',$this->data(['category_id'=>'']));
        $response->assertSessionHasErrors(['category_id'=>'A category_id is required',]);
    }

    public function testCanNotCreateProductIfAvailableNotBoolean()
    {
        $response =$this->actingAs($this->user)->post('/products',$this->data(['available'=>'a']));
        $response->assertSessionHasErrors(['available'=>'An available should be boolean',]);
    }
    public function testCanNotCreateProductIfPriceNotInteger()
    {
        $response =$this->actingAs($this->user)->post('/products',$this->data(['price'=>'a']));
        $response->assertSessionHasErrors(['price'=>'A Price should be integer',]);
    }
    public function testCanNotCreateProductIfOldPriceNotInteger()
    {
        $response =$this->actingAs($this->user)->post('/products',$this->data(['old_price'=>'a']));
        $response->assertSessionHasErrors(['old_price'=>'An Old Price should be integer',]);
    }
    public function testCanNotCreateProductIfOldCategoryIdNotExist()
    {
        $response =$this->actingAs($this->user)->post('/products',$this->data(['category_id'=>4]));
        $response->assertSessionHasErrors(['category_id'=>'A Category Id should be exist',]);
    }
}
